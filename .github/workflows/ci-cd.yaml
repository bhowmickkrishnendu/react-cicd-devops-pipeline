name: CI/CD Pipeline

on:
  pull_request:
    branches: [main]
    types: [closed]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install Dependencies
      working-directory: ./ui
      run: npm install

    - name: Run Unit Tests
      working-directory: ./ui
      run: npm test -- --watchAll=false

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: bhowmickkrishnendu  
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Adding short SHA to image tag
      id: short-sha
      run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

    - name: Build and Push Multi-Platform Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64/v8
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ steps.short-sha.outputs.SHORT_SHA }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Trivy Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/${{ github.repository }}:${{ steps.short-sha.outputs.SHORT_SHA }}
        format: 'table'
        exit-code: '0'
        ignore-unfixed: true

    - name: Deploy to PROD (on main branch)
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEV_HOST }}
        username: ${{ secrets.DEV_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          echo "${{ secrets.GHCR_TOKEN }}" > /tmp/ghcr_token
          cat /tmp/ghcr_token | docker login ghcr.io -u bhowmickkrishnendu --password-stdin
          rm /tmp/ghcr_token
          docker pull --platform linux/arm64/v8 ghcr.io/${{ github.repository }}:${{ steps.short-sha.outputs.SHORT_SHA }}
          docker stop reactapp 2>/dev/null || true && docker rm reactapp 2>/dev/null || true
          docker run -d --name reactapp --platform linux/arm64/v8 -p 3000:80 ghcr.io/${{ github.repository }}:${{ steps.short-sha.outputs.SHORT_SHA }}
      

    # - name: Deploy to UAT (on uat branch)
    #   if: github.ref == 'refs/heads/uat'
    #   uses: appleboy/ssh-action@v1.0.3
    #   with:
    #     host: ${{ secrets.UAT_HOST }}
    #     username: ${{ secrets.UAT_USER }}
    #     key: ${{ secrets.SSH_PRIVATE_KEY }}
    #     port: 22
    #     script: |
    #       echo "${{ secrets.GHCR_TOKEN }}" > /tmp/ghcr_token
    #       cat /tmp/ghcr_token | docker login ghcr.io -u bhowmickkrishnendu --password-stdin
    #       rm /tmp/ghcr_token
    #       docker pull --platform linux/arm64/v8 ghcr.io/${{ github.repository }}:${{ steps.short-sha.outputs.SHORT_SHA }}
    #       docker stop reactapp 2>/dev/null || true && docker rm reactapp 2>/dev/null || true
    #       docker run -d --name reactapp --platform linux/arm64/v8 -p 3001:80 ghcr.io/${{ github.repository }}:${{ steps.short-sha.outputs.SHORT_SHA }}


    - name: Slack Notify (Success)
      if: success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_MESSAGE: "✅ SUCCESS: Deployment for *${{ github.ref_name }}* completed successfully. Image: ghcr.io/${{ github.repository }}:${{ steps.short-sha.outputs.SHORT_SHA }}"
        SLACK_COLOR: good
    
    - name: Slack Notify (Failure)
      if: failure()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_MESSAGE: |
          ❌ *FAILED*: Deployment for *${{ github.ref_name }}* failed.
          Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        SLACK_COLOR: danger
        

    # - name: Send Email on Failure
    #   if: failure()
    #   uses: dawidd6/action-send-mail@v3
    #   with:
    #     server_address: ${{ secrets.EMAIL_SERVER }}
    #     server_port: 587
    #     username: ${{ secrets.EMAIL_USERNAME }}
    #     password: ${{ secrets.EMAIL_PASSWORD }}
    #     subject: ❌ GitHub CI/CD Failed on ${{ github.ref_name }}
    #     body: |
    #       GitHub Actions failed during deployment for branch: ${{ github.ref_name }}
    #       Repository: ${{ github.repository }}
    #       Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    #     to: ${{ secrets.EMAIL_TO }}
    #     from: DevOps CI/CD <${{ secrets.EMAIL_USERNAME }}>
      
